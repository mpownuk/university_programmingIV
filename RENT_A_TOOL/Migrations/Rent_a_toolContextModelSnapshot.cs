// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RENT_A_TOOL.models;

#nullable disable

namespace RENT_A_TOOL.Migrations
{
    [DbContext(typeof(Rent_a_toolContext))]
    partial class Rent_a_toolContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RENT_A_TOOL.models.Sprzęt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StanMagazynowy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Zdjecie")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Sprzęt");
                });

            modelBuilder.Entity("RENT_A_TOOL.models.Użytkownik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HasloHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Użytkownicy");
                });

            modelBuilder.Entity("RENT_A_TOOL.models.Wypożyczenie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataWypozyczenia")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataZwrotu")
                        .HasColumnType("datetime2");

                    b.Property<int>("ID_Klienta")
                        .HasColumnType("int");

                    b.Property<int>("ID_Sprzet")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ID_Klienta");

                    b.HasIndex("ID_Sprzet");

                    b.ToTable("Wypożyczenia");
                });

            modelBuilder.Entity("RENT_A_TOOL.models.Wypożyczenie", b =>
                {
                    b.HasOne("RENT_A_TOOL.models.Użytkownik", "Klient")
                        .WithMany()
                        .HasForeignKey("ID_Klienta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RENT_A_TOOL.models.Sprzęt", "Sprzet")
                        .WithMany()
                        .HasForeignKey("ID_Sprzet")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Klient");

                    b.Navigation("Sprzet");
                });
#pragma warning restore 612, 618
        }
    }
}
